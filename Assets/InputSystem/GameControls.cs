//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3458e7d2-5a24-480b-b7d6-45275679ff45"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""67e7c476-cbe8-4855-a37b-09abd636d9b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2437ce3b-b8c0-4fd3-bdda-3c945a44bef4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyBtn"",
                    ""type"": ""Button"",
                    ""id"": ""6bc3811a-e1dd-4041-8e64-800408c30fa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMove"",
                    ""type"": ""Button"",
                    ""id"": ""15da0210-ac54-4fad-9d2e-9961fb4312f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMove"",
                    ""type"": ""Button"",
                    ""id"": ""01e86d19-8f28-4c58-acdd-ecbd2cd5873b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""b1f75d5d-9467-4269-bc36-6b3891a0083e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3d76071d-73ff-4488-b1a0-cbcf760c7f7a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2e048696-8faa-4330-a339-c97fddadd3bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf7914b0-62a9-41b7-bc07-876c5a54e217"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f78eff70-4dc0-45fd-bcde-b7251fa99399"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""26ebd3d7-cd3a-4937-bf00-5b2fc8aa8783"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daf7e75f-fc99-470a-8532-fa23ecdf23e0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17120d4b-43cc-4791-9bab-581488db2e96"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d90180ed-d0ca-4231-ab00-911471f182cb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ed6245c-f207-430b-a32c-0fe49bf72a3b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""f4d23116-7959-4630-9160-a62212ca9872"",
            ""actions"": [
                {
                    ""name"": ""TouchScreen"",
                    ""type"": ""Value"",
                    ""id"": ""1667ea34-cfe6-4c4f-8781-2554464f908c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Value"",
                    ""id"": ""56389a8a-188e-4b4b-98e9-8736230a7ba6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapCount=10)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""dc2b843e-7314-471b-96e9-6db82089f910"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouch"",
                    ""type"": ""Value"",
                    ""id"": ""b4f5e6b6-2c3d-4c1b-826a-2ac2e877a312"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondPress"",
                    ""type"": ""Value"",
                    ""id"": ""0e3e89e7-ce71-4816-b64a-334b0075d817"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d21538a-4060-4b78-aa51-43bdcfac4508"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3968fb39-3fc5-4695-a138-5573886d711a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfc0d6a6-7c19-4fa9-8e28-780565126561"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""849954af-5721-4a35-aa43-c6c4adcd71e8"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b083adc-a008-4365-88b2-eae27a08fc94"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2228957f-966e-4741-ac08-e0398fde0bb6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e70ad538-7de6-4eee-8a24-31d08da48ba2"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Common"",
            ""id"": ""0b853f67-c532-4ed3-b97e-660be519e474"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""4e5aaf33-2c22-4940-98c4-46e8b79e799b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchScreen"",
                    ""type"": ""Value"",
                    ""id"": ""2aa75417-3a53-4724-ab4e-bd4d49bb3c2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45a7c72d-5303-4f52-a55b-48fb51d501f5"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a32fb8f7-652f-489a-87d3-151edbace3eb"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""413291f2-71ca-4a66-bebb-31f143571020"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""331fb343-01f3-46a9-a76a-a8f302ca750d"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_FlyBtn = m_Player.FindAction("FlyBtn", throwIfNotFound: true);
        m_Player_LeftMove = m_Player.FindAction("LeftMove", throwIfNotFound: true);
        m_Player_RightMove = m_Player.FindAction("RightMove", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_TouchScreen = m_UI.FindAction("TouchScreen", throwIfNotFound: true);
        m_UI_Press = m_UI.FindAction("Press", throwIfNotFound: true);
        m_UI_Zoom = m_UI.FindAction("Zoom", throwIfNotFound: true);
        m_UI_SecondTouch = m_UI.FindAction("SecondTouch", throwIfNotFound: true);
        m_UI_SecondPress = m_UI.FindAction("SecondPress", throwIfNotFound: true);
        // Common
        m_Common = asset.FindActionMap("Common", throwIfNotFound: true);
        m_Common_Press = m_Common.FindAction("Press", throwIfNotFound: true);
        m_Common_TouchScreen = m_Common.FindAction("TouchScreen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_FlyBtn;
    private readonly InputAction m_Player_LeftMove;
    private readonly InputAction m_Player_RightMove;
    public struct PlayerActions
    {
        private @GameControls m_Wrapper;
        public PlayerActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @FlyBtn => m_Wrapper.m_Player_FlyBtn;
        public InputAction @LeftMove => m_Wrapper.m_Player_LeftMove;
        public InputAction @RightMove => m_Wrapper.m_Player_RightMove;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @FlyBtn.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlyBtn;
                @FlyBtn.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlyBtn;
                @FlyBtn.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlyBtn;
                @LeftMove.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftMove;
                @LeftMove.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftMove;
                @LeftMove.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftMove;
                @RightMove.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightMove;
                @RightMove.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightMove;
                @RightMove.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightMove;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @FlyBtn.started += instance.OnFlyBtn;
                @FlyBtn.performed += instance.OnFlyBtn;
                @FlyBtn.canceled += instance.OnFlyBtn;
                @LeftMove.started += instance.OnLeftMove;
                @LeftMove.performed += instance.OnLeftMove;
                @LeftMove.canceled += instance.OnLeftMove;
                @RightMove.started += instance.OnRightMove;
                @RightMove.performed += instance.OnRightMove;
                @RightMove.canceled += instance.OnRightMove;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_TouchScreen;
    private readonly InputAction m_UI_Press;
    private readonly InputAction m_UI_Zoom;
    private readonly InputAction m_UI_SecondTouch;
    private readonly InputAction m_UI_SecondPress;
    public struct UIActions
    {
        private @GameControls m_Wrapper;
        public UIActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchScreen => m_Wrapper.m_UI_TouchScreen;
        public InputAction @Press => m_Wrapper.m_UI_Press;
        public InputAction @Zoom => m_Wrapper.m_UI_Zoom;
        public InputAction @SecondTouch => m_Wrapper.m_UI_SecondTouch;
        public InputAction @SecondPress => m_Wrapper.m_UI_SecondPress;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @TouchScreen.started -= m_Wrapper.m_UIActionsCallbackInterface.OnTouchScreen;
                @TouchScreen.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnTouchScreen;
                @TouchScreen.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnTouchScreen;
                @Press.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPress;
                @Zoom.started -= m_Wrapper.m_UIActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnZoom;
                @SecondTouch.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSecondTouch;
                @SecondTouch.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSecondTouch;
                @SecondTouch.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSecondTouch;
                @SecondPress.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSecondPress;
                @SecondPress.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSecondPress;
                @SecondPress.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSecondPress;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchScreen.started += instance.OnTouchScreen;
                @TouchScreen.performed += instance.OnTouchScreen;
                @TouchScreen.canceled += instance.OnTouchScreen;
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @SecondTouch.started += instance.OnSecondTouch;
                @SecondTouch.performed += instance.OnSecondTouch;
                @SecondTouch.canceled += instance.OnSecondTouch;
                @SecondPress.started += instance.OnSecondPress;
                @SecondPress.performed += instance.OnSecondPress;
                @SecondPress.canceled += instance.OnSecondPress;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Common
    private readonly InputActionMap m_Common;
    private ICommonActions m_CommonActionsCallbackInterface;
    private readonly InputAction m_Common_Press;
    private readonly InputAction m_Common_TouchScreen;
    public struct CommonActions
    {
        private @GameControls m_Wrapper;
        public CommonActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_Common_Press;
        public InputAction @TouchScreen => m_Wrapper.m_Common_TouchScreen;
        public InputActionMap Get() { return m_Wrapper.m_Common; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonActions set) { return set.Get(); }
        public void SetCallbacks(ICommonActions instance)
        {
            if (m_Wrapper.m_CommonActionsCallbackInterface != null)
            {
                @Press.started -= m_Wrapper.m_CommonActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_CommonActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_CommonActionsCallbackInterface.OnPress;
                @TouchScreen.started -= m_Wrapper.m_CommonActionsCallbackInterface.OnTouchScreen;
                @TouchScreen.performed -= m_Wrapper.m_CommonActionsCallbackInterface.OnTouchScreen;
                @TouchScreen.canceled -= m_Wrapper.m_CommonActionsCallbackInterface.OnTouchScreen;
            }
            m_Wrapper.m_CommonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @TouchScreen.started += instance.OnTouchScreen;
                @TouchScreen.performed += instance.OnTouchScreen;
                @TouchScreen.canceled += instance.OnTouchScreen;
            }
        }
    }
    public CommonActions @Common => new CommonActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFlyBtn(InputAction.CallbackContext context);
        void OnLeftMove(InputAction.CallbackContext context);
        void OnRightMove(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnTouchScreen(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnSecondTouch(InputAction.CallbackContext context);
        void OnSecondPress(InputAction.CallbackContext context);
    }
    public interface ICommonActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnTouchScreen(InputAction.CallbackContext context);
    }
}
